{"version":3,"sources":["img/PauseIcon.svg","img/PlayIcon.svg","img/StopIcon.svg","img/logo-krab.png","StructureSample/atoms/DateHeader.js","StructureSample/molecules/Month.js","StructureSample/pages/Calendar.js","StructureSample/pages/Tasks.js","StructureSample/pages/Timer.js","StructureSample/pages/Users.js","StructureSample/pages/Nav.js","StructureSample/pages/Aside.js","StructureSample/pages/Home.js","StructureSample/pages/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","week","DateHeader","incommingDate","isDateVisible","date","Date","zmienna","getDay","currentDay","getDate","weekDays","i","className","map","elem","index","Day","day","Month","now","numberOfDays","getFullYear","getMonth","emptyArray","Filter","Calendar","dateCalendar","Tasks","Timer","tasks","view","Users","Nav","to","Aside","src","Logo","alt","Home","path","exact","SignUp","AuthGuard","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.badd7479.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PauseIcon.1c6e45ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/PlayIcon.a43f3e48.svg\";","module.exports = __webpack_public_path__ + \"static/media/StopIcon.c602ce1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-krab.d7dcb03b.png\";","//Header: \"task description\" + \"Mon(15th) Tue(16th) Wed(17th) ....\"\r\n\r\nimport React from \"react\";\r\nimport \"../styleAnia.css\";\r\n\r\nconst week = [\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n  \"Sunday\",\r\n];\r\n\r\nfunction DateHeader({ incommingDate, isDateVisible }) {\r\n  const date = new Date(incommingDate);\r\n  //   console.log(date.getDate(), date.getDay());\r\n  const zmienna = (date.getDay() + 6) % 7;\r\n  const currentDay = date.getDate() - zmienna;\r\n\r\n  // unworking for biggining & ending month\r\n  const weekDays = [];\r\n  for (let i = 0; i < 7; i++) {\r\n    weekDays[i] = currentDay + i;\r\n  }\r\n  return (\r\n    <div className=\"displayFLexRow\">\r\n      {weekDays.map((elem, index) => (\r\n        <div className=\"margin widthProcent12\">\r\n          <p className=\"underline\">{week[index]}</p>\r\n          {isDateVisible && <p>{elem} th</p>}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateHeader;\r\n","//Months name\r\n//all weeks for the months?\r\n\r\nimport React from \"react\";\r\nimport DateHeader from \"../atoms/DateHeader\";\r\n\r\nfunction Day({ day }) {\r\n  return (\r\n    <>\r\n      <p className={\"widthProcent12 height75\"}> Day {day}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Month({ date }) {\r\n  const now = new Date(date);\r\n  const numberOfDays = new Date(\r\n    now.getFullYear(),\r\n    now.getMonth() + 1,\r\n    0\r\n  ).getDate();\r\n  const emptyArray = [];\r\n\r\n  for (let i = 0; i < numberOfDays; i++) {\r\n    emptyArray[i] = <Day day={i + 1} />;\r\n  }\r\n  return (\r\n    <>\r\n      <DateHeader incommingDate={[2020, 10, 13]} isDateVisible={false} />\r\n      <div className={\"displayFLexRow wrap\"}>{emptyArray}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Month;\r\n","//h2 -> calendar\r\n// 3x button -> Day, Week, Month\r\n//Filter\r\n//button previous\r\n//Calendar header -> monday(15th), tuesday(16th), wednesday(17th).....\r\n//button next\r\n//Calendar -> compose of components day, week, month\r\n\r\nimport React from \"react\";\r\nimport Month from \"../molecules/Month\";\r\n\r\nfunction Filter() {\r\n  return <button>Filter</button>;\r\n}\r\n\r\nfunction Calendar({ dateCalendar }) {\r\n  return (\r\n    <div className=\"mainHome\">\r\n      <h2>Calendar</h2>\r\n      <div>\r\n        <button>Day</button>\r\n        <button>Week</button>\r\n        <button>Month</button>\r\n      </div>\r\n      <Filter />\r\n      <div className={\"displayFLexRow2\"}>\r\n        <button className={\"marginTop\"}>Previous </button>\r\n        <div className={\"widthProcent80\"}>\r\n          <Month date={dateCalendar} />\r\n          {/*zamiennie później z <Day/> & <Week/>*/}\r\n        </div>\r\n        <button className={\"marginTop\"}>Next</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n","//Header -> Tasks\r\n\r\n//Heading: \"task name\", \"Task type\", \"Task description\", \"Data\", \"Start\", \"End\", \"Duration\"\r\n\r\n//One Tasks:\r\n//Button -> \"edit\"? maybe with img/svg/icon?\r\n//Content like in heading\r\n//PlayStop.js\r\n\r\nimport React from \"react\";\r\n\r\nconst Tasks = () => {\r\n  return (\r\n    <div className=\"mainHome\">\r\n      <h1>Tasks</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","// FilterS\r\n//2xButtons -> current, weeks view\r\n\r\n//TimerCurrent\r\n//all active task with PlayStop.js Component\r\n//Time counter\r\n// Maybe like AsideTimer???\r\n\r\n//TimerWeek\r\n//DataHeader.js\r\n//99999xTimerTask\r\n// Total time counter for each day\r\n\r\nimport React from \"react\";\r\nimport DateHeader from \"../atoms/DateHeader\";\r\nimport PlayStop from \"../molecules/PlayStop\";\r\n\r\nfunction FiltrS() {\r\n  return <button>FiltrS</button>;\r\n}\r\n\r\nfunction TimerCurrent({ tasks }) {\r\n  return (\r\n    <div>\r\n      <h2>Timer</h2>\r\n      <button>Current</button>\r\n      <button>Week</button>\r\n      <FiltrS />\r\n      {tasks.map(task => {\r\n        return (\r\n          <div>\r\n            <p>{task.title}</p>\r\n            <p>{task.description}</p>\r\n            <PlayStop classIcon=\"iconSVG\" />\r\n            <p>04:20</p>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TimerTask({ task }) {\r\n  return (\r\n    <>\r\n      <div className={\"displayTimerWeekTask\"}>\r\n        <p className={\"width100\"}>{task.title}</p>\r\n        <p className={\"width100\"}>{task.description}</p>\r\n        <div className={\"displayFlexHour\"}>\r\n          <p className={\"widthProcent12\"}>04:20</p>\r\n          <p className={\"widthProcent12\"}>04:20</p>\r\n          <p className={\"widthProcent12\"}>04:20</p>\r\n          <p className={\"widthProcent12\"}>04:20</p>\r\n          <p className={\"widthProcent12\"}>04:20</p>\r\n          <p className={\"widthProcent12\"}>04:20</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction TimerWeek({ tasks }) {\r\n  return (\r\n    <>\r\n      <h2>Timer</h2>\r\n\r\n      <button>Current</button>\r\n      <button>Week</button>\r\n      <FiltrS />\r\n      <div className={\"displayTimerWeekHeader\"}>\r\n        <p>Task description</p>\r\n        <DateHeader incommingDate={[2020, 10, 13]} isDateVisible={false} />\r\n      </div>\r\n      <div>\r\n        {tasks.map(task => {\r\n          return <TimerTask task={task} />;\r\n        })}\r\n      </div>\r\n      <div className={\"displayFlexHourTotal\"}>\r\n        <p>Total:</p>\r\n        <p>04:20</p>\r\n        <p>04:20</p>\r\n        <p>04:20</p>\r\n        <p>04:20</p>\r\n        <p>04:20</p>\r\n        <p>04:20</p>\r\n        <p>04:20</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Timer({ tasks, view }) {\r\n  return (\r\n    <div className=\"mainHome\">\r\n      <h1>Timer</h1>\r\n      {/* {view === \"week\" ? (\r\n        <TimerWeek tasks={tasks} />\r\n      ) : (\r\n        <TimerCurrent tasks={tasks} />\r\n      )} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\n\r\nconst Users = () => {\r\n  return (\r\n    <div className=\"mainHome\">\r\n      <h1>Users</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div className=\"navHome\">\r\n      <NavLink className=\"navIcon\" to=\"/\">\r\n        Tasks\r\n      </NavLink>\r\n      <NavLink className=\"navIcon\" to=\"/timer\">\r\n        Timer\r\n      </NavLink>\r\n      <NavLink className=\"navIcon\" to=\"/calendar\">\r\n        Calendar\r\n      </NavLink>\r\n      <NavLink className=\"navIcon\" to=\"/users\">\r\n        Users\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport Logo from \"../../img/logo-krab.png\";\r\n\r\nconst Aside = () => {\r\n  return (\r\n    <div className=\"asideHome\">\r\n      <img src={Logo} alt=\"logo\" />\r\n      <h3>AsideNav</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Aside;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Calendar from \"./Calendar\";\r\nimport Tasks from \"./Tasks\";\r\nimport Timer from \"./Timer\";\r\nimport Users from \"./Users\";\r\nimport Nav from \"./Nav\";\r\nimport Aside from \"./Aside\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"home\">\r\n        <Nav />\r\n        <Aside />\r\n        <Switch>\r\n          <Route path=\"/users\">\r\n            <Users />\r\n          </Route>\r\n          <Route path=\"/calendar\">\r\n            <Calendar />\r\n          </Route>\r\n          <Route path=\"/timer\">\r\n            <Timer />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <Tasks />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport Button from \"../atoms/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SignUp() {\r\n  return (\r\n    <div>\r\n      <h3>To jest komponent rejestracji</h3>\r\n      <Button text=\"zarejestruj się\" />\r\n      <div>\r\n        <p>Masz konto?</p>\r\n        <Link to=\"/signin\">Zaloguj się</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Home from \"./StructureSample/pages/Home\";\r\nimport StartPage from \"./StructureSample/pages/StartPage\";\r\n\r\nconst AuthGuard = ({ children }) => {\r\n  const isLoggedIn = true;\r\n\r\n  return isLoggedIn ? children : <StartPage />;\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AuthGuard>\r\n        <Home />\r\n      </AuthGuard>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}